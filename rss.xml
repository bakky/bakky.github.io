<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>霸小奇的博客</title>
    <link>http://bakky.github.io</link>
    <pubDate>2013-05-14 12:07:20 +0800</pubDate>
    <item>
      <title>《重构》笔记（更新中）</title>
      <link>http://bakky.github.io/2013/笔记/restruct.html</link>
      <pubDate>2013-05-08 12:00:00 +0800</pubDate>
      <description>&lt;h2&gt;第1章：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在设计前期采用模式常常导致过度工程&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;开发业务代码时很容易面向过程编程&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;大方法差成小方法:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;所有行为拆成很多小行为，然后将合适的行为提炼到对象中
分拆出小方法（要避免过多参数的传递）
这样做可能还会带来代码量的增加
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;运用常用设计模式
    可以穿插看设计模式的书籍（对应设计模式）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;第2章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设计模式更像是重构的一种手段&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;重构就是在整理代码，让代码容易被理解喝修改&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;第6章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;优秀的代码组织和性能间的权衡&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>《effective java》笔记（更新中）</title>
      <link>http://bakky.github.io/2013/笔记/effective_java.html</link>
      <pubDate>2013-05-08 12:00:00 +0800</pubDate>
      <description>&lt;h2&gt;第21条：用函数对象表示策略&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;java没有函数指针，可以用对象引用实现同样的功能&lt;/li&gt;
&lt;li&gt;如果一个类仅仅导出一个方法，那么这个实例就等同于一个指向该方法的指针（例如常见的排序比较器使用：Comparator）这样就可以在某一个对象的方法中执行其它对象。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Arrays.sort(stringArray,new Comparator&amp;lt;String&amp;gt;(){
     public int compare(String s1,String s2){
          return s1.length()-s2.length();
     }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每个比较器就是一个具体策略类，具体策略类往往使用匿名类声明（例如上面的例子），我们也可以声明一个普通的类实现Comparator接口。这个时候，我们可以考虑，因为用匿名类的话，每次执行调用的时候会生成一个新的对象实例，将这个函数对象存储在一个私有的静态final域中。&lt;/p&gt;

&lt;p&gt;如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class A{
     private static class Strlen implements Comparator&amp;lt;String&amp;gt;{
         public int compare(String s1,String s2){
          return s1.length()-s2.length();
          } 
     }
     public static final Comparator&amp;lt;String&amp;gt; STRING_LEN_COMPARE = new Strlen();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用就变成这样了：Arrays.sorts(stringArray,A.STRING_LEN_COMPARE),这样做的好处是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;减少频繁创建对象的开销&lt;/li&gt;
&lt;li&gt;代码的可读性增加，重复利用，可以将A取一个有意义的域名称&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    <item>
      <title>你的第一篇博客</title>
      <link>http://bakky.github.io/2012/new-born.html</link>
      <pubDate>2012-12-22 12:00:00 +0800</pubDate>
      <description>&lt;h1&gt;感谢你使用Gor编写博客&lt;/h1&gt;

&lt;h2&gt;本文位于 posts/first-blog.md , 你可以任何删掉,修改这个文件&lt;/h2&gt;

&lt;p&gt;文件开头是当前文章的元数据&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;date为自动生成, 当然,你可以修改,这是你的自由&lt;/li&gt;
&lt;li&gt;permalink 可以是固定地址,也可以由gor为你自动生成&lt;/li&gt;
&lt;li&gt;categories 就是分类, 可以多个&lt;/li&gt;
&lt;li&gt;tags 同理,多个标签也是很常见的&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;请确保文件使用UTF8 without BOM编码&lt;/p&gt;

&lt;h2&gt;你可以通过执行下面的语句来新建一篇博客:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;gor post 文章标题
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;编译你的博客,并预览之&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;gor compile #编译
gor http
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后打开你的浏览器,访问 &lt;a href=&#34;http://127.0.0.1:8080&#34;&gt;http://127.0.0.1:8080&lt;/a&gt; 来预览&lt;/p&gt;

&lt;h2&gt;你将使用Markdown来编写博客&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://wowubuntu.com/markdown/&#34;&gt;Markdown 语法中文版&lt;/a&gt; 能让你快速入门其语法&lt;/p&gt;

&lt;p&gt;相信&lt;a href=&#34;http://markdownpad.com&#34;&gt;MarkdownPad&lt;/a&gt;或&lt;a href=&#34;http://code.google.com/p/liteide/&#34;&gt;liteide&lt;/a&gt;会是你的编写博客的好帮手&lt;/p&gt;

&lt;h2&gt;如果你打算部署到github的pages上&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;申请github帐户&lt;/li&gt;
&lt;li&gt;新建一个库 username.github.com 即你的用户名命名的地址&lt;/li&gt;
&lt;li&gt;将compiled目录,作为根路径,提交上去github.com上&lt;/li&gt;
&lt;li&gt;稍等几分钟, 你即可通过 &lt;a href=&#34;http://username.github.com&#34;&gt;http://username.github.com&lt;/a&gt; 访问到&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;附上git教程 &lt;a href=&#34;http://gitbook.liuhui998.com/&#34;&gt;GitBook中文版&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;一般来说,你只需要几个简单的git命令就足以应付大部分需求(仅示例)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git://github.com/wendal/wendal.net.git
git add -A
git commit -m &amp;quot;...&amp;quot;
git pull
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;用gor编写博客将会是一件很开心的事,如果有任何意见或建议,欢迎到 &lt;a href=&#34;http://github.com/wendal/gor&#34;&gt;gor的官网&lt;/a&gt; 提交issue&lt;/h2&gt;

&lt;h1&gt;祝你使用愉快&lt;/h1&gt;
</description>
    </item>
  </channel>
</rss>