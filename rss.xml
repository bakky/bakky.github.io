<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>霸小奇的博客</title>
    <link>http://bakky.github.io</link>
    <pubDate>2013-06-07 12:04:51 +0800</pubDate>
    <item>
      <title>追女神日记（更新中）</title>
      <link>http://bakky.github.io/2013/生活/live.html</link>
      <pubDate>2013-06-06 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;2013-06-06&lt;/p&gt;

&lt;p&gt;鼓起勇气找女神qq聊天，很平淡的说了些，女神用女神惯有的方式中断了聊天：我要去洗洗睡了&lt;/p&gt;

&lt;p&gt;呵呵 呵呵…(悲剧了)&lt;/p&gt;
</description>
    </item>
    <item>
      <title>《effective java》笔记（更新中）</title>
      <link>http://bakky.github.io/2013/笔记/effective_java.html</link>
      <pubDate>2013-05-12 12:00:00 +0800</pubDate>
      <description>&lt;h2&gt;第21条：用函数对象表示策略&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;java没有函数指针，可以用对象引用实现同样的功能&lt;/li&gt;
&lt;li&gt;如果一个类仅仅导出一个方法，那么这个实例就等同于一个指向该方法的指针（例如常见的排序比较器使用：Comparator）这样就可以在某一个对象的方法中执行其它对象。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Arrays.sort(stringArray,new Comparator&amp;lt;String&amp;gt;(){
     public int compare(String s1,String s2){
          return s1.length()-s2.length();
     }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每个比较器就是一个具体策略类，具体策略类往往使用匿名类声明（例如上面的例子），我们也可以声明一个普通的类实现Comparator接口。这个时候，我们可以考虑，因为用匿名类的话，每次执行调用的时候会生成一个新的对象实例，将这个函数对象存储在一个私有的静态final域中。&lt;/p&gt;

&lt;p&gt;如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class A{
     private static class Strlen implements Comparator&amp;lt;String&amp;gt;{
         public int compare(String s1,String s2){
          return s1.length()-s2.length();
          } 
     }
     public static final Comparator&amp;lt;String&amp;gt; STRING_LEN_COMPARE = new Strlen();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用就变成这样了：Arrays.sorts(stringArray,A.STRING_LEN_COMPARE),这样做的好处是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;减少频繁创建对象的开销&lt;/li&gt;
&lt;li&gt;代码的可读性增加，重复利用，可以将A取一个有意义的域名称&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    <item>
      <title>《重构》笔记（更新中）</title>
      <link>http://bakky.github.io/2013/笔记/restruct.html</link>
      <pubDate>2013-05-08 12:00:00 +0800</pubDate>
      <description>&lt;h2&gt;第1章：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在设计前期采用模式常常导致过度工程&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;开发业务代码时很容易面向过程编程&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;大方法差成小方法:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;所有行为拆成很多小行为，然后将合适的行为提炼到对象中
分拆出小方法（要避免过多参数的传递）
这样做可能还会带来代码量的增加
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;运用常用设计模式
    可以穿插看设计模式的书籍（对应设计模式）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;第2章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设计模式更像是重构的一种手段&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;重构就是在整理代码，让代码容易被理解喝修改&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;第6章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;优秀的代码组织和性能间的权衡&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
  </channel>
</rss>